OBJECTIVES STAGE 1
In this stage, your program should read Python code from a specified file and perform a single check: the length of code lines should not exceed 79 characters.

Note that:

The path to the file is obtained from standard input.
The general output format is:
Line X: Code Message
In the format:

X is the number of the line where the issue was found. The count starts from one.

Code is the code of the discovered stylistic issue (like S001).

Message is a human-readable description of the issue (optional).

For example:

Line 3: S001 Too long
This format will be used throughout the project with some minor changes.

The order of the lines should always be first to last.
Your program can output another message instead of Too long. The rest of the output must exactly match the provided example. In the code S001, S means a stylistic issue, and 001 is the internal number of the issue.





OBJECTIVES STAGE 2
In this stage, you need to add checks for the following five errors to your program:

[S002] Indentation is not a multiple of four;

[S003] Unnecessary semicolon after a statement (note that semicolons are acceptable in comments);

[S004] Less than two spaces before inline comments;

[S005] TODO found (in comments only and case-insensitive);

[S006] More than two blank lines preceding a code line (applies to the first non-empty line).

Please note that:

If a line contains the same stylistic issue several times, your program should print the information only once. However, if a single line has several issues with different types of error codes, they should be printed as a sorted list.

To simplify the task, we consider it acceptable if your program finds some false-positive stylistic issues in strings, especially in multi-lines ('''...''' and """...""").

We recommend that you break your code into a set of functions to avoid confusion.

Once again:

The path to the file with Python code is obtained from standard input.

The general output format is:

Line X: Code Message
The lines with found issues must be output in ascending order.





OBJECTIVES STAGE 3
In this stage, you need to improve your program so that it can analyze all Python files inside a specified directory.

Please note that:

You also need to change the input format. Instead of reading the path from the standard input, the program must obtain it as a command-line argument:

> python code_analyzer.py directory-or-file
The output format also needs to be changed slightly. It should include the path to the analyzed file:

Path: Line X: Code Message 
All output lines must be sorted in ascending order according to the file name, line number, and issue code.

Non-Python files must be skipped.

Once again:

It is important that all the checks implemented in the previous stages continue to work properly.

If a line contains the same stylistic issue several times, your program must print the information only once. If a line has several issues with different types of error codes, they should be printed in ascending order.

To simplify the solution, we consider it acceptable if your program finds some false-positive stylistic issues in strings, especially in multi-lines ('''...''' and """...""").

We recommend that you break your program code into a set of functions and classes to avoid confusion.






OBJECTIVES STAGE 4
In this stage, we need to add three new checks to the program:

[S007] Too many spaces after construction_name (def or class);

[S008] Class name class_name should be written in CamelCase;

[S009] Function name function_name should be written in snake_case.

Note that:

Functions names may start or end with underscores (__fun, __init__).

To simplify the task, we will assume that classes are always written as in the following examples:

# a simple class
class MyClass:
    pass

# a class based on inheritance
class MyClass(AnotherClass):
    pass
In reality, it's possible to declare a class this way:

class \
        S:
    pass
However, since it is not a common way to declare classes, you can ignore it.

Another assumption is that functions are always declared like this:

def do_magic():
    pass

As before:

The program obtains the path to the file or directory via command-line arguments:
> python code_analyzer.py directory-or-file
All the previously implemented checks should continue to work properly.





OBJECTIVES STAGE 5
You need to add three new checks to your analyzer:

[S010] Argument name arg_name should be written in snake_case;

[S011] Variable var_name should be written in snake_case;

[S012] The default argument value is mutable.

Please note that:

Names of functions, as well as names of variables in the body of a function should be written in snake_case. However, the error message for an invalid function name should be output only when the function is defined. The error message for an invalid variable name should be output only when this variable is assigned a value, not when this variable is used further in the code.

To simplify the task, you only need to check whether the mutable value is directly assigned to an argument:

def fun1(test=[]):  # default argument value is mutable
    pass


def fun2(test=get_value()):  # you can skip this case to simplify the problem
    pass
If a function contains several mutable arguments, the message should be output only once for this function.

Variable and argument names are assumed to be valid if they are written in snake_case. Initial underscores (_) are also acceptable.

As before:

You can use other messages, but the check codes must be exactly as given above.

All the previously implemented checks should continue to work correctly, and the program should be able to read from one or more files.